@using Pegasus.Extensions
@using TaskViewStrings = Pegasus.Library.Services.Resources.Resources.ViewStrings.TaskListStrings
@model IEnumerable<Pegasus.Library.Models.TaskModel>

@if (Model is null || !Model.Any())
{
    <p>@TaskViewStrings.NoTasksFound</p>
}
else
{
    <div class="list-font-sm task-list">
        <div class="list-responsive">
            <ul class="list-narrow-lined list-striped">
                @foreach (var task in Model)
                {
                    <li>
                        <div class="clearfix list-row-condensed">

                            <div class="task-list-ref @task.TaskProfile().TaskRefStyle">
                                <a asp-controller="TaskList" asp-action="Edit" asp-route-id="@task.Id">@task.TaskRef</a>
                            </div>
                            
                            <div class="task-list-icon fa-fw">
                                <i class="@task.PriorityIconClass()"></i>
                            </div>


                            <div class="list-row-condensed @task.TaskProfile().TaskTextStyle">
                                <a asp-controller="TaskList" asp-action="Edit" asp-route-id="@task.Id">@Html.Raw(task.TaskProfile().TaskIcon)@task.Name</a>
                                @if (task.SubTaskCount > 0)
                                {
                                    <a class="task-list-subtask-link" data-subtask-target="subTasks-@task.Id" data-route-id="@task.Id">(@task.SubTaskCount)</a>
                                }
                            </div>

                            <div class="@task.TaskProfile().TaskTimeStyle">
                                @task.Modified.LapsedTime()
                            </div>
                        </div>
                        <ul class="subTasks-@task.Id"></ul>
                    </li>
                }
            </ul>
        </div>
    </div>
}